// Generated by CoffeeScript 1.12.2
(function() {
  var MWSClient, Q, _, client, config, csv, currentTime, currentTimestamp, fbaFeesColumns, getReportList, inventoryHealthColumns, mws, pg, reportTypes;

  Q = require('q');

  _ = require('underscore');

  csv = require('fast-csv');

  pg = require('pg');

  MWSClient = require('mws-api');

  config = require('./config');

  client = new pg.Client(config.DATABASE_URL);

  fbaFeesColumns = ["\"snapshot-date\"", "sku", "fnsku", "asin", "\"product-name\"", "\"product-group\"", "brand", "\"fulfilled-by\"", "\"your-price\"", "\"sales-price\"", "\"longest-side\"", "\"median-side\"", "\"shortest-side\"", "\"length-and-girth\"", "\"unit-of-dimension\"", "\"item-package-weight\"", "\"unit-of-weight\"", "\"product-size-tier\"", "currency", "\"estimated-fee-total\"", "\"estimated-referral-fee-per-unit\"", "\"estimated-variable-closing-fee\"", "\"estimated-order-handling-fee-per-order\"", "\"estimated-pick-pack-fee-per-unit\"", "\"estimated-weight-handling-fee-per-unit\"", "\"estimated-future-fee\"", "\"estimated-future-order-handling-fee-per-order\"", "\"estimated-future-pick-pack-fee-per-unit\"", "\"estimated-future-weight-handling-fee-per-unit\"", "\"expected-future-fulfillment-fee-per-unit\""];

  inventoryHealthColumns = ["\"snapshot-date\"", "sku", "fnsku", "asin", "\"product-name\"", "condition", "\"sales-rank\"", "\"product-group\"", "\"total-quantity\"", "\"sellable-quantity\"", "\"unsellable-quantity\"", "\"inv-age-0-to-90-days\"", "\"inv-age-91-to-180-days\"", "\"inv-age-181-to-270-days\"", "\"inv-age-271-to-365-days\"", "\"inv-age-365-plus-days\"", "\"units-shipped-last-24-hrs\"", "\"units-shipped-last-7-days\"", "\"units-shipped-last-30-days\"", "\"units-shipped-last-90-days\"", "\"units-shipped-last-180-days\"", "\"units-shipped-last-365-days\"", "\"weeks-of-cover-t7\"", "\"weeks-of-cover-t30\"", "\"weeks-of-cover-t90\"", "\"weeks-of-cover-t180\"", "\"weeks-of-cover-t365\"", "\"num-afn-new-sellers\"", "\"num-afn-used-sellers\"", "currency", "\"your-price\"", "\"sales-price\"", "\"lowest-afn-new-price\"", "\"lowest-afn-used-price\"", "\"lowest-mfn-new-price\"", "\"lowest-mfn-used-price\"", "\"qty-to-be-charged-ltsf-12-mo\"", "\"qty-in-long-term-storage-program\"", "\"qty-with-removals-in-progress\"", "\"projected-ltsf-12-mo\"", "\"per-unit-volume\"", "\"is-hazmat\"", "\"in-bound-quantity\"", "\"asin-limit\"", "\"inbound-recommend-quantity\"", "\"qty-to-be-charged-ltsf-6-mo\"", "\"projected-ltsf-6-mo\""];

  getReportList = function(reportTypes, delay) {
    return mws.Reports.GetReportList({
      ReportTypeList: reportTypes
    }).then(function(reportListData, metadata) {
      var i, len, ref, reportIdAndTimestampsByType, reportRequest;
      console.log("Processing reports...");
      reportIdAndTimestampsByType = [];
      if (reportListData.result.ReportInfo !== void 0) {
        ref = reportListData.result.ReportInfo;
        for (i = 0, len = ref.length; i < len; i++) {
          reportRequest = ref[i];
          if (reportRequest.ReportType === "_GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA_" && reportIdAndTimestampsByType["_GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA_"] === void 0) {
            reportIdAndTimestampsByType["_GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA_"] = {
              id: reportRequest.ReportId,
              timestamp: reportRequest.AvailableDate
            };
          }
          if (reportRequest.ReportType === "_GET_FBA_FULFILLMENT_INVENTORY_HEALTH_DATA_" && reportIdAndTimestampsByType["_GET_FBA_FULFILLMENT_INVENTORY_HEALTH_DATA_"] === void 0) {
            reportIdAndTimestampsByType["_GET_FBA_FULFILLMENT_INVENTORY_HEALTH_DATA_"] = {
              id: reportRequest.ReportId,
              timestamp: reportRequest.AvailableDate
            };
          }
          if (Object.keys(reportIdAndTimestampsByType).length === 2) {
            break;
          }
        }
      }
      if (Object.keys(reportIdAndTimestampsByType).length < 2) {
        return Q.delay(delay).then(function() {
          return getReportList(reportTypes, delay * 2);
        });
      } else {
        return Q.allSettled(_.map(Object.keys(reportIdAndTimestampsByType), function(reportType) {
          return mws.Reports.GetReport({
            ReportId: reportIdAndTimestampsByType[reportType].id
          }).then(function(report) {
            var date, deferred, formattedDate, queryParams;
            deferred = Q.defer();
            date = new Date(reportIdAndTimestampsByType[reportType].timestamp);
            formattedDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
            queryParams = [];
            csv.fromString(report.result, {
              headers: true,
              delimiter: '\t'
            }).on("data", function(data) {
              var count, insertPlaceholders, insertValues, j, key, len1, queryString, ref1, tableToInsert;
              insertPlaceholders = new Array();
              count = 0;
              insertValues = new Array();
              tableToInsert = "inventory-health";
              if (!_.contains(Object.keys(data), "snapshot-date")) {
                insertValues.push(formattedDate);
                insertPlaceholders.push("$" + ++count);
                tableToInsert = "fba-fees";
              }
              ref1 = Object.keys(data);
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                key = ref1[j];
                if (key === "is-hazmat") {
                  if (data[key] === 'N') {
                    insertValues.push(false);
                  } else {
                    insertValues.push(true);
                  }
                } else if (data[key] === null || data[key] === void 0 || data[key].trim() === '' || data[key].trim() === '--') {
                  insertValues.push(null);
                } else {
                  insertValues.push(data[key]);
                }
                insertPlaceholders.push("$" + ++count);
              }
              queryString = '';
              if (tableToInsert === "fba-fees") {
                queryString = 'INSERT INTO "' + tableToInsert + '"(' + fbaFeesColumns.join(',') + ') VALUES (' + insertPlaceholders.join(',') + ')';
              } else {
                queryString = 'INSERT INTO "' + tableToInsert + '"(' + inventoryHealthColumns.join(',') + ') VALUES (' + insertPlaceholders.join(',') + ')';
              }
              return queryParams.push({
                queryString: queryString,
                insertValues: insertValues
              });
            }).on("error", function(data) {
              console.log(data);
              return deferred.reject(new Error(data));
            }).on("end", function() {
              return deferred.resolve(queryParams);
            });
            return deferred.promise;
          }).then(function(queries) {
            return Q.all(_.map(queries, function(query) {
              var deferred;
              deferred = Q.defer();
              client.query(query.queryString, query.insertValues, function(err, result) {
                if (err) {
                  console.log(err);
                  return deferred.reject(new Error(err));
                } else {
                  return deferred.resolve(result);
                }
              });
              return deferred.promise;
            }));
          });
        })).then(function(results) {
          return client.end();
        }).done();
      }
    });
  };


  /*
  	First, request both reports, then get report request list, then get each
  	report once they are ready
  
  	To get the report request list of reports that were just requested
  	and not all of them, keep a timestamp of when the process has started
  	and only ask for reports requested from that timestamp
   */

  mws = new MWSClient({
    accessKeyId: config.AWS_ACCESS_KEY,
    secretAccessKey: config.MWS_SECRET_KEY,
    merchantId: config.SELLER_ID,
    meta: {
      retry: true,
      next: true,
      limit: 2e308
    }
  });

  currentTime = new Date();

  currentTimestamp = currentTime.toISOString();

  reportTypes = ["_GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA_", "_GET_FBA_FULFILLMENT_INVENTORY_HEALTH_DATA_"];

  client.connect();

  getReportList(reportTypes, 60000);

}).call(this);
