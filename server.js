// Generated by CoffeeScript 1.12.2
(function() {
  var Busboy, LocalStrategy, Q, _, apiworker, app, bcrypt, bodyParser, buildReorderData, calculateCalculatedOutputs, compression, config, csrf, db, express, flash, getFileWithLength, outputReorderColumns, parseAndStoreManualInputs, passport, removeFeeDataDuplicates, session, sortInventoryDataByAsin, toArray, upsertIntoDb, xlsx;

  Q = require('q');

  _ = require('underscore');

  express = require('express');

  bodyParser = require('body-parser');

  compression = require('compression');

  session = require('express-session');

  flash = require('connect-flash');

  Busboy = require('busboy');

  toArray = require('stream-to-array');

  bcrypt = require('bcrypt');

  passport = require('passport');

  xlsx = require('node-xlsx')["default"];

  csrf = require('csurf');

  LocalStrategy = require('passport-local').Strategy;

  config = require('./config');

  db = require('./db');

  apiworker = require('./apiworker');

  app = express();

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  if (!config.IS_WORKER) {
    app.use(session({
      secret: config.COOKIE_SECRET,
      resave: false,
      saveUninitialized: false
    }));
    app.use(flash());
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(compression());
    app.use(express["static"]('public'));
    app.use(csrf());
    app.use(function(req, res, next) {
      var csrfToken;
      csrfToken = req.csrfToken();
      res.cookie('XSRF-TOKEN', csrfToken);
      res.locals.csrfToken = csrfToken;
      return next();
    });
    app.use(function(req, res, next) {
      res.locals.messages = req.flash('error');
      return next();
    });
    app.set('views', __dirname + '/views');
    app.set('view engine', 'pug');
    passport.use(new LocalStrategy({
      usernameField: 'email'
    }, function(email, password, done) {
      return db.User.findOne({
        where: {
          email: email
        }
      }).then(function(user) {
        var userValues;
        if (!user) {
          return done(null, false, {
            message: 'Incorrect username or password'
          });
        }
        userValues = user.dataValues;
        if (userValues.hash === null) {
          return done(null, userValues);
        }
        return bcrypt.compare(password, userValues.hash).then(function(result) {
          if (result) {
            return done(null, userValues);
          }
          return done(null, false, {
            message: 'Incorrect username or password'
          });
        });
      });
    }));
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return db.User.findById(id).then(function(user) {
        return done(null, user.dataValues);
      });
    });
  }

  db.createTablesIfNotExist();

  outputReorderColumns = ["snapshot-date", "ASIN", "product-name", "Sales Rank", "product-group", "total-units-shipped-last-24-hrs", "total-units-shipped-last-7-days", "total-units-shipped-last-30-days", "total-units-shipped-last-90-days", "total-units-shipped-last-180-days", "total-units-shipped-last-365-days", "num-afn-new-sellers", "Remove from Restock report", "In Stock or OOS - Crenstone", "Inbound Crenstone", "Days OOS - Crenstone", "Last 30 days of sales when in stock - Crenstone", "In Stock or OOS - Oredroc", "Inbound Oredroc", "Days OOS - Oredroc", "Last 30 days of sales when in stock - Oredroc", "Total Stock - Both Accounts", "Total Sales both accounts - 30 days", "Seasonal Tags", "OEM MFG Part Number", "OEM MFG", "Vendor Part number", "Item Description", "Vendor Name", "Vendor Price", "Quantity needed per ASIN", "Total price of ASIN", "Quantity needed for restock order 3x on 30 day sales", "Quantity needed for restock order 6x on 30 day sales", "Closeout / Retail Tag", "Can Order Again?", "Selling in accounts", "Has stock in accounts", "Crenstone SKU", "Crenstone FNSKU", "Our Current Price", "Lowest Prime Price", "Below Current Price?", "brand", "your-price", "sales-price", "estimated-fee-total", "estimated-future-fee (Current Selling on Amazon + Future Fulfillment fees)", "estimated-shipping-cost", "total-inventory-cost", "overhead-rate", "profit", "future-profit", "crenstone-units-shipped-last-24-hrs", "crenstone-units-shipped-last-7-days", "crenstone-units-shipped-last-30-days", "crenstone-units-shipped-last-90-days", "crenstone-units-shipped-last-180-days", "crenstone-units-shipped-last-365-days", "Oredroc SKU", "Oredroc FNSKU", "Our Current Price", "Lowest Prime Price", "Below Current Price?", "brand", "your-price", "sales-price", "estimated-fee-total", "estimated-future-fee (Current Selling on Amazon + Future Fulfillment fees)", "estimated-shipping-cost", "total-inventory-cost", "overhead-rate", "profit", "future-profit", "oredroc-units-shipped-last-24-hrs", "oredroc-units-shipped-last-7-days", "oredroc-units-shipped-last-30-days", "oredroc-units-shipped-last-90-days", "oredroc-units-shipped-last-180-days", "oredroc-units-shipped-last-365-days"];

  buildReorderData = function(reorderItems) {
    var asin, asinKeyArray, asinKeyQuery, asinKeys, belowCurrentPriceCrenstone, belowCurrentPriceOredroc, brand, canOrderAgain, closeoutRetailTag, crenstoneFNSKU, crenstoneSKU, crenstoneUnitsShippedLast180Days, crenstoneUnitsShippedLast24Hours, crenstoneUnitsShippedLast30Days, crenstoneUnitsShippedLast365Days, crenstoneUnitsShippedLast7Days, crenstoneUnitsShippedLast90Days, daysOOSCrenstone, daysOOSOredroc, deferred, estimatedFeeTotal, estimatedFutureFee, estimatedShippingCost, futureProfit, hasStockInAccounts, i, inStockOrOOSCrenstone, inStockOrOOSOredroc, inboundCrenstone, inboundOredroc, itemDescription, key, last30DaysOfSalesWhenInStockCrenstone, last30DaysOfSalesWhenInStockOredroc, len, lowestPrimePriceCrenstone, lowestPrimePriceOredroc, numAfnNewSellers, oemMfg, oemMfgPartNumber, oredrocFNSKU, oredrocSKU, oredrocUnitsShippedLast180Days, oredrocUnitsShippedLast24Hours, oredrocUnitsShippedLast30Days, oredrocUnitsShippedLast365Days, oredrocUnitsShippedLast7Days, oredrocUnitsShippedLast90Days, ourCurrentPriceInventoryCrenstone, ourCurrentPriceInventoryOredroc, overheadRate, productGroup, productName, profit, quantityNeededForRestockOrder3xOn30DaySales, quantityNeededForRestockOrder6xOn30DaySales, quantityNeededPerASIN, ref, removeFromRestockReport, reorderData, reorderRow, salesPrice, salesRank, seasonalTags, selectQuery, sellingInAccounts, snapshotDate, snapshotDateFormatted, totalInventoryCost, totalPricePerASIN, totalSalesBothAccounts30Days, totalStockBothAccounts, totalUnitsShippedLast180Days, totalUnitsShippedLast24Hours, totalUnitsShippedLast30Days, totalUnitsShippedLast365Days, totalUnitsShippedLast7Days, totalUnitsShippedLast90Days, vendorName, vendorPartNumber, vendorPrice, yourPrice;
    reorderData = [];
    asinKeys = new Set();
    ref = Object.keys(reorderItems);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (reorderItems[key]['crenstone'] === void 0) {
        reorderItems[key]['crenstone'] = {};
      }
      if (reorderItems[key]['oredroc'] === void 0) {
        reorderItems[key]['oredroc'] = {};
      }
      snapshotDate = null;
      snapshotDateFormatted = null;
      if (reorderItems[key]["crenstone"] !== void 0 && reorderItems[key]["crenstone"]["snapshot-date"] !== void 0) {
        snapshotDate = new Date(reorderItems[key]["crenstone"]['snapshot-date']);
        snapshotDateFormatted = snapshotDate.getFullYear() + '-' + (snapshotDate.getMonth() + 1) + '-' + snapshotDate.getDate();
      } else {
        snapshotDate = new Date(reorderItems[key]["oredroc"]['snapshot-date']);
        snapshotDateFormatted = snapshotDate.getFullYear() + '-' + (snapshotDate.getMonth() + 1) + '-' + snapshotDate.getDate();
      }
      asin = reorderItems[key]['crenstone']['asin'] || reorderItems[key]['oredroc']['asin'] || '';
      productName = reorderItems[key]['crenstone']['product-name'] || reorderItems[key]['oredroc']['product-name'] || '';
      salesRank = reorderItems[key]['crenstone']['sales-rank'] || reorderItems[key]['oredroc']['sales-rank'] || '';
      productGroup = reorderItems[key]['crenstone']['product-group'] || reorderItems[key]['oredroc']['product-group'] || '';
      totalUnitsShippedLast24Hours = Number(reorderItems[key]['crenstone']['units-shipped-last-24-hrs'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-24-hrs'] || 0);
      totalUnitsShippedLast7Days = Number(reorderItems[key]['crenstone']['units-shipped-last-7-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-7-days'] || 0);
      totalUnitsShippedLast30Days = Number(reorderItems[key]['crenstone']['units-shipped-last-30-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-30-days'] || 0);
      totalUnitsShippedLast90Days = Number(reorderItems[key]['crenstone']['units-shipped-last-90-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-90-days'] || 0);
      totalUnitsShippedLast180Days = Number(reorderItems[key]['crenstone']['units-shipped-last-180-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-180-days'] || 0);
      totalUnitsShippedLast365Days = Number(reorderItems[key]['crenstone']['units-shipped-last-365-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-365-days'] || 0);
      numAfnNewSellers = reorderItems[key]['crenstone']['num-afn-new-sellers'] || reorderItems[key]['oredroc']['num-afn-new-sellers'] || '';
      removeFromRestockReport = reorderItems[key]['crenstone']['remove-from-restock-report'] || reorderItems[key]['oredroc']['remove-from-restock-report'] || '';
      inStockOrOOSCrenstone = reorderItems[key]['crenstone']['sellable-quantity'] || '';
      inboundCrenstone = reorderItems[key]['crenstone']['in-bound-quantity'] || '';
      daysOOSCrenstone = reorderItems[key]['crenstone']['days-OOS'] || '';
      last30DaysOfSalesWhenInStockCrenstone = reorderItems[key]['crenstone']['units-shipped-last-30-days'] || '';
      inStockOrOOSOredroc = reorderItems[key]['oredroc']['sellable-quantity'] || '';
      inboundOredroc = reorderItems[key]['oredroc']['in-bound-quantity'] || '';
      daysOOSOredroc = reorderItems[key]['oredroc']['days-OOS'] || '';
      last30DaysOfSalesWhenInStockOredroc = reorderItems[key]['oredroc']['units-shipped-last-30-days'] || '';
      totalStockBothAccounts = Number(reorderItems[key]['crenstone']['sellable-quantity'] || 0) + Number(reorderItems[key]['crenstone']['in-bound-quantity'] || 0) + Number(reorderItems[key]['oredroc']['sellable-quantity'] || 0) + Number(reorderItems[key]['oredroc']['in-bound-quantity'] || 0);
      totalSalesBothAccounts30Days = Number(reorderItems[key]['crenstone']['units-shipped-last-30-days'] || 0) + Number(reorderItems[key]['oredroc']['units-shipped-last-30-days'] || 0);
      seasonalTags = reorderItems[key]['crenstone']['seasonal-tags'] || reorderItems[key]['oredroc']['seasonal-tags'] || '';
      oemMfgPartNumber = reorderItems[key]['crenstone']['oem-mfg-part-number'] || reorderItems[key]['oredroc']['oem-mfg-part-number'] || '';
      oemMfg = reorderItems[key]['crenstone']['oem-mfg'] || reorderItems[key]['oredroc']['oem-mfg'] || '';
      vendorPartNumber = reorderItems[key]['crenstone']['vendor-part-number'] || reorderItems[key]['oredroc']['vendor-part-number'] || '';
      itemDescription = reorderItems[key]['crenstone']['item-description'] || reorderItems[key]['oredroc']['item-description'] || '';
      vendorName = reorderItems[key]['crenstone']['vendor-name'] || reorderItems[key]['oredroc']['vendor-name'] || '';
      vendorPrice = Number(reorderItems[key]['crenstone']['vendor-price']) || Number(reorderItems[key]['oredroc']['vendor-price']) || null;
      quantityNeededPerASIN = Number(reorderItems[key]['crenstone']['quantity-needed-per-asin']) || Number(reorderItems[key]['oredroc']['quantity-needed-per-asin']) || null;
      totalPricePerASIN = null;
      quantityNeededForRestockOrder3xOn30DaySales = 3 * Number(reorderItems[key]['crenstone']['quantity-needed-per-asin'] || reorderItems[key]['oredroc']['quantity-needed-per-asin'] || 0) - totalStockBothAccounts;
      quantityNeededForRestockOrder6xOn30DaySales = 6 * Number(reorderItems[key]['crenstone']['quantity-needed-per-asin'] || reorderItems[key]['oredroc']['quantity-needed-per-asin'] || 0) - totalStockBothAccounts;
      closeoutRetailTag = reorderItems[key]['crenstone']['closeout-retail-tag'] || reorderItems[key]['oredroc']['closeout-retail-tag'] || '';
      canOrderAgain = reorderItems[key]['crenstone']['can-order-again'] || reorderItems[key]['oredroc']['can-order-again'] || '';
      sellingInAccounts = '';
      if (Number(reorderItems[key]['crenstone']['sellable-quantity'] || 0) > 0) {
        sellingInAccounts += 'Crenstone ';
      }
      if (Number(reorderItems[key]['oredroc']['sellable-quantity'] || 0) > 0) {
        sellingInAccounts += 'Oredroc';
      }
      hasStockInAccounts = '';
      if (Number(reorderItems[key]['crenstone']['sellable-quantity'] || 0) > 0) {
        hasStockInAccounts += 'Crenstone ';
      }
      if (Number(reorderItems[key]['oredroc']['sellable-quantity'] || 0) > 0) {
        hasStockInAccounts += 'Oredroc';
      }
      crenstoneSKU = reorderItems[key]['crenstone']['sku'] || '';
      crenstoneFNSKU = reorderItems[key]['crenstone']['fnsku'] || '';
      ourCurrentPriceInventoryCrenstone = parseFloat(reorderItems[key]['crenstone']['your-price'] || 0);
      lowestPrimePriceCrenstone = parseFloat(reorderItems[key]['crenstone']['lowest-afn-new-price'] || 0);
      belowCurrentPriceCrenstone = lowestPrimePriceCrenstone - ourCurrentPriceInventoryCrenstone;
      brand = reorderItems[key]['crenstone']['brand'] || reorderItems[key]['oredroc']['brand'] || '';
      yourPrice = parseFloat(reorderItems[key]['crenstone']['your-price']) || parseFloat(reorderItems[key]['oredroc']['your-price']) || null;
      salesPrice = parseFloat(reorderItems[key]['crenstone']['sales-price']) || parseFloat(reorderItems[key]['oredroc']['sales-price']) || null;
      estimatedFeeTotal = parseFloat(reorderItems[key]['crenstone']['estimated-fee-total']) || parseFloat(reorderItems[key]['oredroc']['estimated-fee-total']) || null;
      estimatedFutureFee = lowestPrimePriceCrenstone + parseFloat(reorderItems[key]['crenstone']['expected-future-fulfillment-fee-per-unit'] || reorderItems[key]['oredroc']['expected-future-fulfillment-fee-per-unit'] || 0);
      estimatedShippingCost = parseFloat(reorderItems[key]['crenstone']['estimated-shipping-cost'] || reorderItems[key]['oredroc']['estimated-shipping-cost']) || null;
      totalInventoryCost = '';
      overheadRate = '';
      profit = '';
      futureProfit = '';
      crenstoneUnitsShippedLast24Hours = Number(reorderItems[key]['crenstone']['units-shipped-last-24-hrs'] || 0);
      crenstoneUnitsShippedLast7Days = Number(reorderItems[key]['crenstone']['units-shipped-last-7-days'] || 0);
      crenstoneUnitsShippedLast30Days = Number(reorderItems[key]['crenstone']['units-shipped-last-30-days'] || 0);
      crenstoneUnitsShippedLast90Days = Number(reorderItems[key]['crenstone']['units-shipped-last-90-days'] || 0);
      crenstoneUnitsShippedLast180Days = Number(reorderItems[key]['crenstone']['units-shipped-last-180-days'] || 0);
      crenstoneUnitsShippedLast365Days = Number(reorderItems[key]['crenstone']['units-shipped-last-365-days'] || 0);
      oredrocSKU = reorderItems[key]['oredroc']['sku'] || '';
      oredrocFNSKU = reorderItems[key]['oredroc']['fnsku'] || '';
      ourCurrentPriceInventoryOredroc = parseFloat(reorderItems[key]['oredroc']['your-price'] || 0);
      lowestPrimePriceOredroc = parseFloat(reorderItems[key]['oredroc']['lowest-afn-new-price'] || 0);
      belowCurrentPriceOredroc = lowestPrimePriceOredroc - ourCurrentPriceInventoryOredroc;
      oredrocUnitsShippedLast24Hours = Number(reorderItems[key]['oredroc']['units-shipped-last-24-hrs'] || 0);
      oredrocUnitsShippedLast7Days = Number(reorderItems[key]['oredroc']['units-shipped-last-7-days'] || 0);
      oredrocUnitsShippedLast30Days = Number(reorderItems[key]['oredroc']['units-shipped-last-30-days'] || 0);
      oredrocUnitsShippedLast90Days = Number(reorderItems[key]['oredroc']['units-shipped-last-90-days'] || 0);
      oredrocUnitsShippedLast180Days = Number(reorderItems[key]['oredroc']['units-shipped-last-180-days'] || 0);
      oredrocUnitsShippedLast365Days = Number(reorderItems[key]['oredroc']['units-shipped-last-365-days'] || 0);
      reorderRow = [snapshotDateFormatted || '', asin, productName, salesRank, productGroup, totalUnitsShippedLast24Hours, totalUnitsShippedLast7Days, totalUnitsShippedLast30Days, totalUnitsShippedLast90Days, totalUnitsShippedLast180Days, totalUnitsShippedLast365Days, numAfnNewSellers, removeFromRestockReport, inStockOrOOSCrenstone, inboundCrenstone, daysOOSCrenstone, last30DaysOfSalesWhenInStockCrenstone, inStockOrOOSOredroc, inboundOredroc, daysOOSOredroc, last30DaysOfSalesWhenInStockOredroc, totalStockBothAccounts, totalSalesBothAccounts30Days, seasonalTags, oemMfgPartNumber, oemMfg, vendorPartNumber, itemDescription, vendorName, vendorPrice, quantityNeededPerASIN, totalPricePerASIN, quantityNeededForRestockOrder3xOn30DaySales, quantityNeededForRestockOrder6xOn30DaySales, closeoutRetailTag, canOrderAgain, sellingInAccounts, hasStockInAccounts, crenstoneSKU, crenstoneFNSKU, ourCurrentPriceInventoryCrenstone, lowestPrimePriceCrenstone, belowCurrentPriceCrenstone, brand, yourPrice, salesPrice, estimatedFeeTotal, estimatedFutureFee, estimatedShippingCost, totalInventoryCost, overheadRate, profit, futureProfit, crenstoneUnitsShippedLast24Hours, crenstoneUnitsShippedLast7Days, crenstoneUnitsShippedLast30Days, crenstoneUnitsShippedLast90Days, crenstoneUnitsShippedLast180Days, crenstoneUnitsShippedLast365Days, oredrocSKU, oredrocFNSKU, ourCurrentPriceInventoryOredroc, lowestPrimePriceOredroc, belowCurrentPriceOredroc, brand, yourPrice, salesPrice, estimatedFeeTotal, estimatedFutureFee, estimatedShippingCost, totalInventoryCost, overheadRate, profit, futureProfit, oredrocUnitsShippedLast24Hours, oredrocUnitsShippedLast7Days, oredrocUnitsShippedLast30Days, oredrocUnitsShippedLast90Days, oredrocUnitsShippedLast180Days, oredrocUnitsShippedLast365Days];
      reorderData.push(reorderRow);
      asinKeys.add(asin);
    }
    asinKeyArray = Array.from(asinKeys);
    asinKeyQuery = '(' + _.map(asinKeyArray, function(asin) {
      return '\'' + asin + '\'';
    }).join(',') + ')';
    selectQuery = 'SELECT * FROM \"manual-inputs\" WHERE asin IN ' + asinKeyQuery;
    deferred = Q.defer();
    db.sequelize.query(selectQuery, {
      type: db.sequelize.QueryTypes.SELECT
    }).then(function(manualInputs) {
      var currentIndex, j, k, lastReorderIndex, len1, len2, manualInputAsin, manualInputIndex, manualInputsByAsin, numDuplicates, ref1, reorderDataByAsin, reorderDataCopy, reorderIndex, reorderIndices, row;
      if (manualInputs.length > 0) {
        reorderDataByAsin = _.groupBy(reorderData, function(row) {
          return row[1];
        });
        manualInputsByAsin = _.groupBy(manualInputs, function(manualInput) {
          return manualInput['asin'];
        });
        ref1 = Object.keys(manualInputsByAsin);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          manualInputAsin = ref1[j];
          reorderIndices = [];
          reorderIndex = 0;
          for (k = 0, len2 = reorderData.length; k < len2; k++) {
            row = reorderData[k];
            if (row[1] === manualInputAsin) {
              break;
            }
            reorderIndex++;
          }
          if (reorderIndex < reorderData.length) {
            reorderIndices.push(reorderIndex);
            if (manualInputsByAsin[manualInputAsin].length > 1) {
              lastReorderIndex = reorderData.length;
              numDuplicates = manualInputsByAsin[manualInputAsin].length - 1;
              reorderDataCopy = JSON.parse(JSON.stringify(reorderData[reorderIndex]));
              while (numDuplicates > 0) {
                reorderData.push(reorderDataCopy);
                reorderIndices.push(lastReorderIndex);
                lastReorderIndex++;
                numDuplicates--;
              }
            }
            manualInputIndex = 0;
            while (reorderIndices.length > 0) {
              currentIndex = reorderIndices.shift();
              reorderData[currentIndex][12] = manualInputsByAsin[manualInputAsin][manualInputIndex]['remove-from-restock-report'];
              reorderData[currentIndex][23] = manualInputsByAsin[manualInputAsin][manualInputIndex]['seasonal-tags'];
              reorderData[currentIndex][24] = manualInputsByAsin[manualInputAsin][manualInputIndex]['oem-mfg-part-number'];
              reorderData[currentIndex][25] = manualInputsByAsin[manualInputAsin][manualInputIndex]['oem-mfg'];
              reorderData[currentIndex][26] = manualInputsByAsin[manualInputAsin][manualInputIndex]['vendor-part-number'];
              reorderData[currentIndex][27] = manualInputsByAsin[manualInputAsin][manualInputIndex]['item-description'];
              reorderData[currentIndex][28] = manualInputsByAsin[manualInputAsin][manualInputIndex]['vendor-name'];
              reorderData[currentIndex][29] = manualInputsByAsin[manualInputAsin][manualInputIndex]['vendor-price'];
              reorderData[currentIndex][30] = manualInputsByAsin[manualInputAsin][manualInputIndex]['quantity-needed-per-asin'];
              reorderData[currentIndex][34] = manualInputsByAsin[manualInputAsin][manualInputIndex]['closeout-retail-tag'];
              reorderData[currentIndex][35] = manualInputsByAsin[manualInputAsin][manualInputIndex]['can-order-again'];
              reorderData[currentIndex][48] = manualInputsByAsin[manualInputAsin][manualInputIndex]['estimated-shipping-cost'];
              reorderData[currentIndex][69] = manualInputsByAsin[manualInputAsin][manualInputIndex]['estimated-shipping-cost'];
              reorderData[currentIndex][50] = manualInputsByAsin[manualInputAsin][manualInputIndex]['overhead-rate'];
              reorderData[currentIndex][71] = manualInputsByAsin[manualInputAsin][manualInputIndex]['overhead-rate'];
              manualInputIndex++;
            }
          }
        }
      }
      calculateCalculatedOutputs(reorderData);
      reorderData.unshift(outputReorderColumns);
      return deferred.resolve(reorderData);
    });
    return deferred.promise;
  };

  calculateCalculatedOutputs = function(data) {
    var estimatedShippingCost, futureProfit, i, j, len, len1, overheadRate, profit, quantityNeeded3x, quantityNeeded6x, results, row, row2, totalPriceOfASIN, totalSales, totalStock;
    results = [];
    for (i = 0, len = data.length; i < len; i++) {
      row = data[i];
      totalStock = Number(row[13] || 0) + Number(row[14] || 0) + Number(row[17] || 0) + Number(row[18] || 0);
      totalSales = Number(row[16] || 0) + Number(row[20] || 0);
      totalPriceOfASIN = parseFloat(row[29] || 0) * parseFloat(row[30] || 0);
      for (j = 0, len1 = data.length; j < len1; j++) {
        row2 = data[j];
        if (row[1] === row2[1] && row[26] !== row2[26]) {
          totalPriceOfASIN += parseFloat(row2[29] || 0) * parseFloat(row[30] || 0);
        }
      }
      quantityNeeded3x = totalSales * Number(row[30] || 0) * 3;
      quantityNeeded6x = totalSales * Number(row[30] || 0) * 6;
      overheadRate = totalPriceOfASIN / 5;
      estimatedShippingCost = parseFloat(row[48] || 0);
      profit = parseFloat(row[45] || 0) - totalPriceOfASIN - overheadRate - estimatedShippingCost - parseFloat(row[46] || 0);
      futureProfit = parseFloat(row[45] || 0) - totalPriceOfASIN - overheadRate - estimatedShippingCost - parseFloat(row[47] || 0);
      row[21] = totalStock;
      row[22] = totalSales;
      row[31] = totalPriceOfASIN !== 0 ? totalPriceOfASIN.toFixed(2) : null;
      row[32] = quantityNeeded3x !== 0 ? quantityNeeded3x : null;
      row[33] = quantityNeeded6x !== 0 ? quantityNeeded6x : null;
      row[49] = totalPriceOfASIN !== 0 ? totalPriceOfASIN.toFixed(2) : null;
      row[70] = totalPriceOfASIN !== 0 ? totalPriceOfASIN.toFixed(2) : null;
      row[50] = overheadRate;
      row[71] = overheadRate;
      row[51] = profit > 0 ? parseFloat(profit.toFixed(2)) : 0;
      row[72] = profit > 0 ? parseFloat(profit.toFixed(2)) : 0;
      row[52] = futureProfit > 0 ? parseFloat(futureProfit.toFixed(2)) : 0;
      results.push(row[73] = futureProfit > 0 ? parseFloat(futureProfit.toFixed(2)) : 0);
    }
    return results;
  };

  sortInventoryDataByAsin = function(data) {
    var nameColumn;
    nameColumn = data.shift();
    data.sort(function(a, b) {
      var ref;
      if (a[3] === b[3]) {
        return 0;
      } else {
        return (ref = a[3] < b[3]) != null ? ref : -{
          1: 1
        };
      }
    });
    data.unshift(nameColumn);
    return data;
  };

  removeFeeDataDuplicates = function(data) {
    return _.uniq(data, false, function(row) {
      return row[2];
    });
  };

  parseAndStoreManualInputs = function(file, req, res) {
    return getFileWithLength(req, file).then(function(file) {
      var asin, canOrderAgain, closeoutRetailTag, count, crenstoneSKU, estimatedShippingCost, i, itemDescription, len, manualInputsToUpdate, oemMfg, oemMfgPartNumber, oredrocSKU, overheadRate, quantityNeededPerASIN, ref, removeFromRestockReport, reorderSheet, row, seasonalTags, vendorName, vendorPartNumber, vendorPrice, workbook;
      workbook = xlsx.parse(file.data);
      reorderSheet = workbook[0];
      count = 0;
      manualInputsToUpdate = [];
      ref = reorderSheet.data;
      for (i = 0, len = ref.length; i < len; i++) {
        row = ref[i];
        if (count > 0) {
          asin = row[1];
          crenstoneSKU = row[38];
          oredrocSKU = row[59];
          removeFromRestockReport = row[12];
          seasonalTags = row[23];
          oemMfgPartNumber = row[24];
          oemMfg = row[25];
          vendorPartNumber = row[26];
          itemDescription = row[27];
          vendorName = row[28];
          vendorPrice = row[29];
          quantityNeededPerASIN = row[30];
          closeoutRetailTag = row[34];
          canOrderAgain = row[35];
          estimatedShippingCost = row[48];
          overheadRate = row[50];
          manualInputsToUpdate.push([asin, crenstoneSKU, oredrocSKU, removeFromRestockReport, seasonalTags, oemMfgPartNumber, oemMfg, vendorPartNumber, itemDescription, vendorName, vendorPrice, quantityNeededPerASIN, closeoutRetailTag, canOrderAgain, estimatedShippingCost, overheadRate]);
        }
        ++count;
      }
      return Q.all(_.map(manualInputsToUpdate, function(row) {
        return upsertIntoDb(row);
      })).then(function(result) {
        return res.redirect('/');
      }).fail(function(err) {
        res.status(500).json({
          error: "Internal server error saving manual inputs"
        });
        return console.log(err.stack || err);
      });
    });
  };

  upsertIntoDb = function(inputRow) {
    var inputRowValues, insertQuery, selectQuery, updateQuery;
    inputRow = _.map(inputRow, function(val) {
      if (val !== null && val !== void 0 && val.length > 0) {
        return "'" + val + "'";
      } else if (val === '') {
        return "null";
      } else {
        return val;
      }
    });
    inputRowValues = inputRow.join(",");
    selectQuery = 'SELECT id FROM \"manual-inputs\" WHERE asin=' + inputRow[0] + ' and \"vendor-part-number\"';
    if (inputRow[7] === 'null') {
      selectQuery += ' IS NULL';
    } else {
      selectQuery += '=' + inputRow[7];
    }
    if (inputRow[1] === 'null') {
      selectQuery += ' AND \"crenstone-sku\" IS NULL';
    } else {
      selectQuery += ' AND \"crenstone-sku\" = ' + inputRow[1];
    }
    if (inputRow[2] === 'null') {
      selectQuery += ' AND \"oredroc-sku\" IS NULL';
    } else {
      selectQuery += ' AND \"oredroc-sku\" = ' + inputRow[2];
    }
    insertQuery = 'INSERT INTO \"manual-inputs\"(asin, \"crenstone-sku\", \"oredroc-sku\", \"remove-from-restock-report\", \"seasonal-tags\", \"oem-mfg-part-number\", \"oem-mfg\", \"vendor-part-number\", \"item-description\", \"vendor-name\", \"vendor-price\", \"quantity-needed-per-asin\", \"closeout-retail-tag\", \"can-order-again\", \"estimated-shipping-cost\", \"overhead-rate\") VALUES (' + inputRowValues + ')';
    updateQuery = 'UPDATE \"manual-inputs\" SET asin=' + inputRow[0] + ', \"crenstone-sku\"=' + inputRow[1] + ', \"oredroc-sku\"=' + inputRow[2] + ', \"remove-from-restock-report\"=' + inputRow[3] + ', \"seasonal-tags\"=' + inputRow[4] + ', \"oem-mfg-part-number\"=' + inputRow[5] + ', \"oem-mfg\"=' + inputRow[6] + ', \"vendor-part-number\"=' + inputRow[7] + ', \"item-description\"=' + inputRow[8] + ', \"vendor-name\"=' + inputRow[9] + ', \"vendor-price\"=' + inputRow[10] + ', \"quantity-needed-per-asin\"=' + inputRow[11] + ', \"closeout-retail-tag\"=' + inputRow[12] + ', \"can-order-again\"=' + inputRow[13] + ', \"estimated-shipping-cost\"=' + inputRow[14] + ', \"overhead-rate\"=' + inputRow[15] + ' WHERE id = ';
    return db.sequelize.query(selectQuery, {
      type: db.sequelize.QueryTypes.SELECT
    }).then(function(manualInputs) {
      if (manualInputs.length === 0) {
        return db.sequelize.query(insertQuery);
      } else {
        return db.sequelize.query(updateQuery + manualInputs[0].id);
      }
    }).then(function(res) {
      return res;
    });
  };

  getFileWithLength = function(req, file) {
    var deferred;
    if (req.headers['file-length']) {
      file.knownLength = req.headers['file-length'];
      return Q.resolve(file);
    }
    deferred = Q.defer();
    toArray(file.data, function(err, arr) {
      if (err) {
        deferred.reject(err);
      }
      file.data = Buffer.concat(arr);
      file.knownLength = file.data.length;
      return deferred.resolve(file);
    });
    return deferred.promise;
  };

  app.get('/ping', function(req, res) {
    return res.sendStatus(200);
  });

  if (config.IS_WORKER) {
    app.post('/worker', function(req, res) {
      return res.sendStatus(200);
    });
    app.post('/reports/request', function(req, res) {
      return apiworker.requestReports().then(function(result) {
        return res.sendStatus(200);
      });
    });
    app.post('/reports/getlatest', function(req, res) {
      return apiworker.getLatestReports().then(function(result) {
        return res.sendStatus(200);
      });
    });
  } else {
    app.get('/', function(req, res) {
      if (!req.user) {
        return res.redirect('/login');
      } else {
        return res.render('index', {
          user: req.user
        });
      }
    });
    app.get('/reports/download', function(req, res) {
      var crenstoneFeesDateQuery, crenstoneInventoryDateQuery, date, oredrocFeesDateQuery, oredrocInventoryDateQuery, originalFormattedDate;
      if (!req.user) {
        return res.redirect('/');
      } else {
        date = new Date();
        originalFormattedDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
        oredrocInventoryDateQuery = 'SELECT * FROM \"report-snapshot-dates\" WHERE seller=\'oredroc\' AND type=\'inventory-health\' ORDER BY \"snapshot-date\" DESC';
        crenstoneInventoryDateQuery = 'SELECT * FROM \"report-snapshot-dates\" WHERE seller=\'crenstone\' AND type=\'inventory-health\' ORDER BY \"snapshot-date\" DESC';
        oredrocFeesDateQuery = 'SELECT * FROM \"report-snapshot-dates\" WHERE seller=\'oredroc\' AND type=\'fba-fees\' ORDER BY \"snapshot-date\" DESC';
        crenstoneFeesDateQuery = 'SELECT * FROM \"report-snapshot-dates\" WHERE seller=\'crenstone\' AND type=\'fba-fees\' ORDER BY \"snapshot-date\" DESC';
        return Q.all([db.sequelize.query(oredrocInventoryDateQuery), db.sequelize.query(crenstoneInventoryDateQuery), db.sequelize.query(oredrocFeesDateQuery), db.sequelize.query(crenstoneFeesDateQuery)]).spread(function(oredrocInventoryDateResult, crenstoneInventoryDateResult, oredrocFeesDateResult, crenstoneFeesDateResult) {
          var crenstoneFeesByDateQuery, crenstoneFeesDate, crenstoneFeesDateFormatted, crenstoneInventoryByDateQuery, crenstoneInventoryDate, crenstoneInventoryDateFormatted, oredrocFeesByDateQuery, oredrocFeesDate, oredrocFeesDateFormatted, oredrocInventoryByDateQuery, oredrocInventoryDate, oredrocInventoryDateFormatted;
          if (oredrocInventoryDateResult[1].rowCount === 0 && crenstoneInventoryDateResult[1].rowCount === 0 && oredrocFeesDateResult[1].rowCount === 0 && crenstoneFeesDateResult[1].rowCount === 0) {
            return res.redirect('/');
          } else {
            oredrocInventoryByDateQuery = 'SELECT * FROM "inventory-health" WHERE seller=\'oredroc\'';
            if (oredrocInventoryDateResult[1].rowCount > 0) {
              oredrocInventoryDate = new Date(oredrocInventoryDateResult[0][0]['snapshot-date']);
              oredrocInventoryDateFormatted = oredrocInventoryDate.getFullYear() + '-' + (oredrocInventoryDate.getMonth() + 1) + '-' + oredrocInventoryDate.getDate();
              oredrocInventoryByDateQuery += ' AND \"snapshot-date\"=\'' + oredrocInventoryDateFormatted + '\'';
            }
            crenstoneInventoryByDateQuery = 'SELECT * FROM "inventory-health" WHERE seller=\'crenstone\'';
            if (crenstoneInventoryDateResult[1].rowCount > 0) {
              crenstoneInventoryDate = new Date(crenstoneInventoryDateResult[0][0]['snapshot-date']);
              crenstoneInventoryDateFormatted = crenstoneInventoryDate.getFullYear() + '-' + (crenstoneInventoryDate.getMonth() + 1) + '-' + crenstoneInventoryDate.getDate();
              crenstoneInventoryByDateQuery += ' AND \"snapshot-date\"=\'' + crenstoneInventoryDateFormatted + '\'';
            }
            oredrocFeesByDateQuery = 'SELECT * FROM "fba-fees" WHERE seller=\'oredroc\'';
            if (oredrocFeesDateResult[1].rowCount > 0) {
              oredrocFeesDate = new Date(oredrocFeesDateResult[0][0]['snapshot-date']);
              oredrocFeesDateFormatted = oredrocFeesDate.getFullYear() + '-' + (oredrocFeesDate.getMonth() + 1) + '-' + oredrocFeesDate.getDate();
              oredrocFeesByDateQuery += ' AND \"snapshot-date\"=\'' + oredrocFeesDateFormatted + '\'';
            }
            crenstoneFeesByDateQuery = 'SELECT * FROM "fba-fees" WHERE seller=\'crenstone\'';
            if (crenstoneFeesDateResult[1].rowCount > 0) {
              crenstoneFeesDate = new Date(crenstoneFeesDateResult[0][0]['snapshot-date']);
              crenstoneFeesDateFormatted = crenstoneFeesDate.getFullYear() + '-' + (crenstoneFeesDate.getMonth() + 1) + '-' + crenstoneFeesDate.getDate();
              crenstoneFeesByDateQuery += ' AND \"snapshot-date\"=\'' + crenstoneFeesDateFormatted + '\'';
            }
            return Q.all([
              db.sequelize.query(oredrocInventoryByDateQuery, {
                type: db.sequelize.QueryTypes.SELECT
              }), db.sequelize.query(oredrocFeesByDateQuery, {
                type: db.sequelize.QueryTypes.SELECT
              }), db.sequelize.query(crenstoneInventoryByDateQuery, {
                type: db.sequelize.QueryTypes.SELECT
              }), db.sequelize.query(crenstoneFeesByDateQuery, {
                type: db.sequelize.QueryTypes.SELECT
              })
            ]).spread(function(oredrocInventoryResult, oredrocFeesResult, crenstoneInventoryResult, crenstoneFeesResult) {
              var feeColumnNames, feeData, formattedDate, i, inventoryColumnNames, inventoryData, j, k, key, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, ref, ref1, ref2, ref3, reorderItems, row, rowData, uniqueKey, worksheets;
              if (oredrocInventoryResult.length === 0 && oredrocFeesResult.length === 0 && crenstoneInventoryResult.length === 0 && crenstoneFeesResult.length === 0) {
                return res.redirect('/');
              } else {
                worksheets = [];
                reorderItems = [];
                inventoryData = new Array();
                feeData = new Array();
                inventoryColumnNames = [];
                feeColumnNames = [];
                if (oredrocInventoryResult.length > 0) {
                  inventoryColumnNames = _.filter(Object.keys(oredrocInventoryResult[0]), function(key) {
                    return key !== 'id' && key !== 'seller';
                  });
                  inventoryColumnNames.push("Account");
                  inventoryColumnNames.push("Have to send?");
                  inventoryColumnNames.push("10x total sales x 30 d");
                } else if (crenstoneInventoryResult.length > 0) {
                  inventoryColumnNames = _.filter(Object.keys(oredrocInventoryResult[0]), function(key) {
                    return key !== 'id' && key !== 'seller';
                  });
                  inventoryColumnNames.push("Account");
                  inventoryColumnNames.push("Have to send?");
                  inventoryColumnNames.push("10x total sales x 30 d");
                }
                inventoryData.push(inventoryColumnNames);
                if (oredrocFeesResult.length > 0) {
                  feeColumnNames = _.filter(Object.keys(oredrocFeesResult[0]), function(key) {
                    return key !== 'id' && key !== 'seller' && key !== 'snapshot-date';
                  });
                } else if (crenstoneFeesResult.length > 0) {
                  feeColumnNames = _.filter(Object.keys(crenstoneFeesResult[0]), function(key) {
                    return key !== 'id' && key !== 'seller' && key !== 'snapshot-date';
                  });
                }
                feeData.push(feeColumnNames);
                if (oredrocInventoryResult.length > 0) {
                  for (i = 0, len = oredrocInventoryResult.length; i < len; i++) {
                    row = oredrocInventoryResult[i];
                    uniqueKey = row['asin'];
                    if (!_.contains(Object.keys(reorderItems), uniqueKey)) {
                      reorderItems[uniqueKey] = {};
                      reorderItems[uniqueKey]["oredroc"] = {};
                      reorderItems[uniqueKey]["crenstone"] = {};
                    }
                    rowData = new Array();
                    ref = Object.keys(row);
                    for (j = 0, len1 = ref.length; j < len1; j++) {
                      key = ref[j];
                      if (key === 'snapshot-date') {
                        date = new Date(row[key]);
                        formattedDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
                        rowData.push(formattedDate);
                      } else if (key !== 'id' && key !== 'seller') {
                        rowData.push(row[key]);
                      }
                      reorderItems[uniqueKey]["oredroc"][key] = row[key];
                    }
                    rowData.push('Oredroc');
                    inventoryData.push(rowData);
                  }
                }
                if (oredrocFeesResult.length > 0) {
                  for (k = 0, len2 = oredrocFeesResult.length; k < len2; k++) {
                    row = oredrocFeesResult[k];
                    uniqueKey = row['asin'];
                    if (!_.contains(Object.keys(reorderItems), uniqueKey)) {
                      reorderItems[uniqueKey] = {};
                      reorderItems[uniqueKey]["oredroc"] = {};
                      reorderItems[uniqueKey]["crenstone"] = {};
                    }
                    rowData = new Array();
                    ref1 = Object.keys(row);
                    for (l = 0, len3 = ref1.length; l < len3; l++) {
                      key = ref1[l];
                      if (key !== 'id' && key !== 'seller' && key !== 'snapshot-date') {
                        rowData.push(row[key]);
                      }
                      reorderItems[uniqueKey]["oredroc"][key] = row[key];
                    }
                    feeData.push(rowData);
                  }
                }
                if (crenstoneInventoryResult.length > 0) {
                  for (m = 0, len4 = crenstoneInventoryResult.length; m < len4; m++) {
                    row = crenstoneInventoryResult[m];
                    uniqueKey = row['asin'];
                    if (!_.contains(Object.keys(reorderItems), uniqueKey)) {
                      reorderItems[uniqueKey] = {};
                      reorderItems[uniqueKey]["crenstone"] = {};
                      reorderItems[uniqueKey]["oredroc"] = {};
                    }
                    rowData = new Array();
                    ref2 = Object.keys(row);
                    for (n = 0, len5 = ref2.length; n < len5; n++) {
                      key = ref2[n];
                      if (key === 'snapshot-date') {
                        date = new Date(row[key]);
                        formattedDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
                        rowData.push(formattedDate);
                      } else if (key !== 'id' && key !== 'seller') {
                        rowData.push(row[key]);
                      }
                      reorderItems[uniqueKey]["crenstone"][key] = row[key];
                    }
                    rowData.push('Crenstone');
                    inventoryData.push(rowData);
                  }
                }
                if (crenstoneFeesResult.length > 0) {
                  for (o = 0, len6 = crenstoneFeesResult.length; o < len6; o++) {
                    row = crenstoneFeesResult[o];
                    uniqueKey = row['asin'];
                    if (!_.contains(Object.keys(reorderItems), uniqueKey)) {
                      reorderItems[uniqueKey] = {};
                      reorderItems[uniqueKey]["crenstone"] = {};
                      reorderItems[uniqueKey]["oredroc"] = {};
                    }
                    rowData = new Array();
                    ref3 = Object.keys(row);
                    for (p = 0, len7 = ref3.length; p < len7; p++) {
                      key = ref3[p];
                      if (key !== 'id' && key !== 'seller' && key !== 'snapshot-date') {
                        rowData.push(row[key]);
                      }
                      reorderItems[uniqueKey]["crenstone"][key] = row[key];
                    }
                    feeData.push(rowData);
                  }
                }
                inventoryData = sortInventoryDataByAsin(inventoryData);
                feeData = removeFeeDataDuplicates(feeData);
                return Q.all([
                  Q.fcall(function() {
                    return inventoryData;
                  }), Q.fcall(function() {
                    return feeData;
                  }), buildReorderData(reorderItems)
                ]).spread(function(inventoryData, feeData, reorderData) {
                  var buffer, fileName;
                  worksheets.push({
                    name: "Reorder File",
                    data: reorderData
                  });
                  worksheets.push({
                    name: "From Amazon INV Health",
                    data: inventoryData
                  });
                  worksheets.push({
                    name: "From Amazon Fee Preview",
                    data: feeData
                  });
                  buffer = xlsx.build(worksheets);
                  fileName = originalFormattedDate + "-reorder.xlsx";
                  res.type('xlsx');
                  res.setHeader('Content-disposition', 'attachment; filename=' + fileName);
                  return res.send(buffer);
                });
              }
            });
          }
        });
      }
    });
    app.get('/signup', function(req, res) {
      if (req.user) {
        if (req.user.hash === null) {
          return res.render('signup');
        } else {
          return res.redirect('/');
        }
      } else {
        return res.redirect('/login');
      }
    });
    app.get('/login', function(req, res) {
      if (req.user) {
        if (req.user.hash === null) {
          return res.redirect('/signup');
        } else {
          return res.redirect('/');
        }
      } else {
        return res.render('login');
      }
    });
    app.get('/logout', function(req, res) {
      if (req.user) {
        req.session.destroy();
      }
      return res.redirect('/');
    });
    app.post('/signup', function(req, res) {
      var password;
      if (!req.user) {
        return res.redirect('/login');
      } else {
        password = req.body.password;
        if (password === req.body.confirmPassword) {
          return db.User.findOne({
            where: {
              email: req.user.email
            }
          }).then(function(user) {
            if (user == null) {
              throw {
                notFound: true
              };
            } else {
              return bcrypt.hash(password, parseInt(config.SALTROUNDS)).then(function(hash) {
                return user.updateAttributes({
                  hash: hash
                });
              }).then(function(user) {
                req.session.destroy();
                return res.redirect('/login');
              });
            }
          });
        } else {
          req.flash('error', 'The passwords do not match');
          return res.redirect('/signup');
        }
      }
    });
    app.post('/login', passport.authenticate('local', {
      failureRedirect: '/login',
      failureFlash: true
    }), function(req, res) {
      if (req.user) {
        if (req.user.hash === null) {
          return res.redirect('/signup');
        } else {
          return res.redirect('/');
        }
      } else {
        return res.redirect('/login');
      }
    });
    app.post('/reports/upload', function(req, res) {
      var busboy;
      if (!req.user) {
        return res.redirect('/');
      } else {
        busboy = new Busboy({
          headers: req.headers,
          limits: {
            fileSize: 500 * 1024 * 1024
          }
        });
        busboy.on('file', function(fieldName, fileStream, fileName, encoding, mimetype) {
          var file;
          if (fieldName !== "reorder") {
            console.error("fieldName is not reorder. It's: " + fieldName);
            return res.json(400, {
              error: "Bad upload request. 'document' field not provided"
            });
          }
          if (fileStream == null) {
            console.error("");
            return res.json(400, {
              error: "Bad upload request. 'document' field value is null"
            });
          }
          file = {
            data: fileStream,
            name: fileName,
            encoding: encoding,
            mimetype: mimetype
          };
          return parseAndStoreManualInputs(file, req, res);
        });
        busboy.on('error', function(err) {
          bugsnag.notify("Error on document upload", err);
          console.error("Error parsing multipart form data during document upload");
          console.log(err.stack || err);
          return res.json(500, {
            error: "Internal server error uploading document for investor verification form with id " + req.params.id
          });
        });
        return req.pipe(busboy);
      }
    });
  }

  app.listen(config.PORT);

}).call(this);
